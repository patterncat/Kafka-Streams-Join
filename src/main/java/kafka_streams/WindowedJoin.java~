/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kafka_streams;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.Serializer;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.kstream.KStreamBuilder;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.KeyValueMapper;
import org.apache.kafka.streams.kstream.Reducer;
import org.apache.kafka.streams.kstream.TimeWindows;
import org.apache.kafka.streams.kstream.JoinWindows;
import org.apache.kafka.streams.kstream.ValueJoiner;
import org.apache.kafka.streams.kstream.Windowed;
import org.apache.kafka.streams.StreamsConfig;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class WindowedJoin {

    // POJO classes
    static public class PageView {
        public String user;
        public String page;
        public Long timestamp;
    }

    static public class UserProfile {
        public String region;
        public Long timestamp;
    }

    static public class PageViewByRegion {
        public String user;
        public String page;
        public String region;
    }

    static public class WindowedRegion {
        public long windowStart;
        public String region;
    }

    static public class RegionCount {
        public long count;
        public String region;
    }
    static public class RegionClicks {
        public long clicks;
        public String region;
    }

    public static void main(String[] args) throws IOException{
        Properties props = new Properties();
        props.put(StreamsConfig.APPLICATION_ID_CONFIG, "kafka.streams.1");
        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, "localhost:2181");
        //num.stream.threads = 1
        //props.put(StreamsConfig.TIMESTAMP_EXTRACTOR_CLASS_CONFIG, JsonTimestampExtractor.class);
        props.put(StreamsConfig.STATE_DIR_CONFIG, "/tmp/kafka-streams-join");
        //props.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.StringSerde.getClass().getName());
        //props.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.StringSerde.getClass().getName());
        // setting offset reset to earliest so that we can re-run the demo code with the same pre-loaded data
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        Map<String, Object> serdeProps = new HashMap<>();

        final Serializer<WindowedRegion> windowedRegionSerializer = new JsonPOJOSerializer<>();
        serdeProps.put("JsonPOJOClass", WindowedRegion.class);
        windowedRegionSerializer.configure(serdeProps, false);
        final Deserializer<WindowedRegion> windowedRegionDeserializer = new JsonPOJODeserializer<>();
        serdeProps.put("JsonPOJOClass", WindowedRegion.class);
        windowedRegionDeserializer.configure(serdeProps, false);
        final Serde<WindowedRegion> windowedregionSerde = Serdes.serdeFrom(windowedRegionSerializer, windowedRegionDeserializer);

        KStreamBuilder builder = new KStreamBuilder();


        KStream<String, Long> userclicks = builder.stream(Serdes.String(), Serdes.Long(), "streams-pageview-input");

        KTable<String, String> userregion = builder.table(Serdes.String(), Serdes.String(), "streams-userprofile-input");



        //leftJoin(KTable<K,V1> table, ValueJoiner<V,V1,V2> joiner)
	    //Combine values of this stream with KTable's elements of the same key using non-windowed Left Join. non windowed since ktable is 		//already a changelog
        KStream<WindowedRegion, Long> regionclicks = userclicks.leftJoin(userregion, new ValueJoiner<Long, String, RegionClicks>(){
            @Override
            public RegionClicks apply(Long clicks, String region){
                RegionClicks rc = new RegionClicks();
                if (region != null){rc.region= region;}
                else rc.region= "UNKNOWN";
                rc.clicks=clicks;
                System.out.println("leftjoin");
                return rc;
            }
            })
            //map(KeyValueMapper<K,V,KeyValue<K1,V1>> mapper)
            //R apply(K key, V value)  Map a record with the given key and value to a new value.
            .map(new KeyValueMapper<String, RegionClicks, KeyValue<String, Long>>(){
                @Override
                public KeyValue<String, Long> apply(String user, RegionClicks rclick){
                    System.out.println("map");
                    return new KeyValue<>(rclick.region, rclick.clicks);
		   

                }
            })            
            .countByKey(TimeWindows.of("clicks-summary", 60*1000L).advanceBy(1000), Serdes.String())
            .toStream()
            .map(new KeyValueMapper<Windowed<String>, Long, KeyValue<WindowedRegion, Long>>() {
                @Override
                public KeyValue<WindowedRegion, Long> apply(Windowed<String> key, Long clicks){
                    WindowedRegion wregion = new WindowedRegion();
                    wregion.windowStart = key.window().start();
                    wregion.region = key.key();
                    return new KeyValue<>(wregion, clicks);
		    System.out.println("map2");

                }
            });

            /*
            //reduceByKey(Reducer<V> reducer, Serde<K> keySerde, Serde<V> valueSerde, String name)
            //Combine values of this stream by key into a new instance of ever-updating KTable.

            .reduceByKey(new Reducer<Long>(){
                @Override
                public Long apply(Long value1, Long value2){
                    System.out.println("reduceByKey");
                    return (value1+value2);
                }
            }, Serdes.String(), Serdes.Long(), "clicksPerRegionWindowed");


            */

            regionclicks.to(windowedregionSerde, Serdes.Long(), "output");
  

        System.out.println("Performed join.");

        //Thread.sleep(5000L);
        

        //streams.close();
        KafkaStreams streams = new KafkaStreams(builder, props);
        streams.start();


    }
}
